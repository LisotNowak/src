{% extends 'base.html.twig' %} 
{% block title %}Dotation vestimentaire{% endblock %}


{% block sidebar %}
    {% include 'dotation/sidebar.html.twig' with {
        'active_link': 'catalogue',
        'currentUser': app.user,
        'listeUsers': listeUsers|default([]),
        'nombreArticles': nombreArticles|default(0),
        'pointsInCart': pointsInCart|default(0)
    } %}
{% endblock %}


{% block body %}


<div class="container mt-4" id="top-logo">
    <div class="row align-items-center">
        <div class="col-md-3 d-flex align-items-center">
            {# Total de points et points restants après déduction des articles dans le panier #}
            {% set pointsInCart = pointsInCart|default(0) %}
            {% set remaining = (app.user.pointDotation - pointsInCart) < 0 ? 0 : (app.user.pointDotation - pointsInCart) %}
            <div>
                <div><span class="mr-2">Points disponibles :</span><strong id="totalPoints" data-value="{{ app.user.pointDotation }}">{{ app.user.pointDotation }} P</strong></div>
                <div class="text-muted small">Points dans le panier : <span id="pointsInCart" data-value="{{ pointsInCart }}">{{ pointsInCart }} P</span></div>
                <div class="mt-1"><strong>Points restants : <span id="pointsRemaining" data-value="{{ remaining }}">{{ remaining }} P</span></strong></div>
            </div>
         </div>

        <div class="col-md-5" id="searchbar">
          <div class="input-group">
            <input type="text" class="form-control" placeholder="Search" id="searchInput">
            <button class="btn btn-primary" type="button" disabled>
              <i class="fas fa-search"></i>
            </button>
          </div>
        </div>


        <div class="col-md-3">
          <select id="typeFilter" class="form-control">
            <option value="">-- Tous les types --</option>
              {% for type in listeTypes %}
                <option value="{{ type.nom|lower }}">{{ type.nom }}</option>
              {% endfor %}

          </select>
        </div>

        <div class="col-md-1 d-flex justify-content-end align-items-center" id="icons">          
          <a href="/dota/panier" class="d-inline-block">
            <div class="circle me-2">
              <i class="fas fa-shopping-cart text-primary"></i>
              <sup>
                <span id="cartBadge" class="badge bg-danger" style="width: 23px;">
                  {% if nombreArticles is defined %}{{ nombreArticles }}{% else %}0{% endif %}
                </span>
              </sup>
            </div>
          </a>
        </div>
        

    </div>
</div>

{# Zone d'alerte AJAX (remplaçant l'alerte JS basique) #}
<div id="ajaxAlert" class="alert alert-danger alert-dismissible fade" role="alert"
     style="display:none; position: fixed; top: 80px; right: 20px; z-index: 2000; min-width: 260px;">
  <span id="ajaxAlertMessage"></span>
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
</div>


{# Modal après ajout au panier #}
<div class="modal fade" id="cartModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-sm modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-body text-center">
        <p class="mb-3"><strong>Article ajouté au panier</strong></p>
        <div class="d-flex justify-content-center">
          <button type="button" id="goToCartBtn" class="btn btn-primary me-2">Aller au panier</button>
          <button type="button" id="continueBtn" class="btn btn-secondary" data-bs-dismiss="modal">Continuer mes achats</button>
        </div>
      </div>
    </div>
  </div>
</div>


{# --- Styles pour les pastilles couleur --- #}
<style>
.color-option { display:inline-flex; align-items:center; margin-right:0.5rem; position:relative; }
.color-option input[type="radio"] { position:absolute; opacity:0; width:1px; height:1px; pointer-events:none; }
.color-option .color-swatch {
  display:inline-block;
  width:28px;
  height:28px;
  border-radius:6px;
  border:2px solid rgba(0,0,0,0.08);
  box-shadow: 0 1px 2px rgba(0,0,0,0.06);
  transition: transform .12s ease, box-shadow .12s ease, border-color .12s ease;
  cursor:pointer;
}
.color-option:hover .color-swatch { transform: scale(1.03); box-shadow:0 2px 6px rgba(0,0,0,0.12); }
.color-option .color-label { margin-left:6px; font-size:12px; color:#444; display:none; } /* hidden but available for screen readers */
.color-option.selected .color-swatch {
  transform: scale(1.06);
  box-shadow: 0 0 0 4px rgba(0,123,255,0.12);
  border-color: rgba(0,123,255,0.8);
}
/* small focus help for keyboard users */
.color-option input[type="radio"]:focus + .color-swatch { outline: 3px solid rgba(0,123,255,0.14); outline-offset: 2px; }
</style>

{# <div class="container">
  <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
    <div class="carousel-inner">
      <div class="carousel-item active">
        <img class="d-block w-100" src="https://images.ctfassets.net/1nw0m35kh5t7/6kI0OuYTrVywhKOyUd1kDi/ed6186f9da8feb4464ec6f9e238e6073/Types-of-e-commerce-16-9" alt="First slide" class="img-fluid">
      </div>
      <div class="carousel-item">
        <img class="d-block w-100" src="https://assets.entrepreneur.com/content/3x2/2000/20191127134656-e-commerce-3406613.jpeg?width=600&crop=16:9" alt="Second slide" class="img-fluid">
      </div>
      <div class="carousel-item">
        <img class="d-block w-100" src="https://media.newyorker.com/photos/5b465113da42df0b560981d3/16:9/w_1280,c_limit/180723_r32444_rd.jpg" alt="Third slide" class="img-fluid">
      </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="sr-only">Next</span>
    </a>
  </div>
 </div> #}


<br> <br>

<div class="container cardItem" id="products">

  <div class="container">
    <!-- Une seule row : Bootstrap gère automatiquement le wrapping -->
    <div class="row">
      {% set currentType = null %}
      {% for product in listeArticles %}
        {% if product.nomType != currentType %}
          {% set currentType = product.nomType %}
          <div class="w-100"><h3 class="mt-4 mb-3">{{ currentType }}</h3></div>
        {% endif %}

        <div class="col-md-3 col-sm-6 mb-4">
          <div class="card h-100" data-nom="{{ product.nom | lower }}" data-type="{{ product.nomType | lower }}">
            <p class="pl-2">{{ product.reference }}</p>
            <img class="card-img-top img-fluid"
                 src="{{ product.image is not empty ? asset('uploads/images/' ~ product.image) : asset('img/defaultimage.png') }}"
                 alt="{{ product.nom }}">
            <div class="card-body d-flex flex-column">
              <p class="card-text">{{ product.nom }}</p>
              <p class="card-cost">{{ product.point }} P</p>
              <p class="card-cost">{{ product.description }}</p>

              {# --- Choix taille (scopé par produit) --- #}
              <div class="mb-2">
                <small class="text-muted">Taille :</small>
                <div class="mt-1">
                  {% set hasTaille = false %}
                    {% for assoc in listeAssociationTaillesArticle %}
                        {% if assoc.idArticle == product.id %}
                            {% set hasTaille = true %}
                        {% endif %}
                    {% endfor %}
                    {% if hasTaille %}
                      <div class="form-group mb-2">
                        {# <label for="size_{{ product.id }}" class="form-label">Taille</label> #}
                        <select name="size_{{ product.id }}" id="size_{{ product.id }}"
                                class="form-select form-select-sm w-auto d-inline-block">
                          <option value="">Taille...</option>
                          {% for assoc in listeAssociationTaillesArticle %}
                            {% if assoc.idArticle == product.id %}
                              <option value="{{ assoc.nomTaille }}">{{ assoc.nomTaille }}</option>
                            {% endif %}
                          {% endfor %}
                        </select>
                      </div>
                    {% else %}
                      <input type="hidden" name="size_{{ product.id }}" value="">
                    {% endif %}

                </div>
              </div>

              {# --- Choix couleur (scopé par produit, pastille cliquable) --- #}
              <div class="mb-2">
                <small class="text-muted">Couleur :</small>
                <div class="mt-1 d-flex align-items-center">
                  {% set hasColor = false %}
                  {% for assoc in listeAssociationCouleursArticle %}
                    {% if assoc.idArticle == product.id %}
                      {% set hasColor = true %}
                      {% set colorCode = '' %}
                      {% for c in listeCouleurs %}
                        {% if c.nom == assoc.nomCouleur %}
                          {% set colorCode = c.codeCouleur %}
                        {% endif %}
                      {% endfor %}
                      <label class="me-2 color-option" title="{{ assoc.nomCouleur }}" role="button" aria-label="Couleur {{ assoc.nomCouleur }}">
                        <input type="radio" name="color_{{ product.id }}" value="{{ assoc.nomCouleur }}">
                        <span class="color-swatch" style="background:{{ colorCode ?: '#ffffff' }};"></span>
                        <span class="color-label visually-hidden">{{ assoc.nomCouleur }}</span>
                      </label>
                    {% endif %}
                  {% endfor %}
                  {% if not hasColor %}
                    <input type="hidden" name="color_{{ product.id }}" value="">
                  {% endif %}
                </div>
              </div>

              {# --- Quantité --- #}
              <div class="mb-2">
                <small class="text-muted">Quantité :</small>
                <div class="mt-1">
                  <input type="number" name="quantity_{{ product.id }}" min="1" value="1" class="form-control" style="width:90px;">
                </div>
              </div>

              <div class="mt-auto">
                <button class="btn btn-primary btn-block add-to-cart" type="button" data-id="{{ product.id }}" data-points="{{ product.point }}">
                  <i class="fas fa-cart-plus"></i> Ajouter au panier
                </button>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

{# JS pour soumettre la sélection (scopée par produit) - POST AJAX + modal de confirmation #}
<script>
document.addEventListener('DOMContentLoaded', function () {
  const searchInput = document.getElementById('searchInput');
  const typeFilter = document.getElementById('typeFilter');
  const productCards = document.querySelectorAll('#products .card');

function applyFilters() {
  const search = searchInput.value.toLowerCase().trim();
  const selectedType = typeFilter.value;

  productCards.forEach(card => {
    const nom = card.dataset.nom || '';
    const type = card.dataset.type || '';

    const matchSearch = nom.includes(search);
    const matchType = !selectedType || type === selectedType;

    if (matchSearch && matchType) {
      card.closest('.col-md-3, .col-sm-6').style.display = '';
    } else {
      card.closest('.col-md-3, .col-sm-6').style.display = 'none';
    }
  });

  // Vérifie les catégories
  document.querySelectorAll('#products .w-100').forEach(categoryDiv => {
    let hasVisible = false;
    let sibling = categoryDiv.nextElementSibling;

    while (sibling && !sibling.matches('.w-100')) {
      if (sibling.style.display !== 'none') {
        hasVisible = true;
        break;
      }
      sibling = sibling.nextElementSibling;
    }

    categoryDiv.style.display = hasVisible ? '' : 'none';
  });
}


  if (searchInput) searchInput.addEventListener('input', applyFilters);
  if (typeFilter) typeFilter.addEventListener('change', applyFilters);
});


const userSelect = document.getElementById('targetUserSelect');
if (userSelect) {
    userSelect.addEventListener('change', function() {
        const userId = this.value;

        // Mettre à jour la session du user cible
        fetch("{{ path('set_target_user') }}", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ target_user_id: userId })
        });

        // Récupérer les points du user sélectionné
        fetch("{{ path('ajax_get_user_points') }}", {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId })
        })
        .then(resp => resp.json())
        .then(data => {
            if (data.success) {
                const totalEl = document.getElementById('totalPoints');
                const inCartEl = document.getElementById('pointsInCart');
                const remainingEl = document.getElementById('pointsRemaining');

                if (totalEl) totalEl.textContent = data.pointsTotal + ' P';
                if (inCartEl) inCartEl.textContent = data.pointsInCart + ' P';
                if (remainingEl) remainingEl.textContent = data.pointsRemaining + ' P';
            } else {
                console.error(data.message);
            }
        })
        .catch(console.error);
    });
}

document.addEventListener('DOMContentLoaded', function () {
  function showAjaxAlert(msg) {
    const a = document.getElementById('ajaxAlert');
    const m = document.getElementById('ajaxAlertMessage');
    if (!a || !m) return;
    m.textContent = msg;
    a.style.display = 'block';
    a.classList.add('show');
    setTimeout(() => { a.classList.remove('show'); a.style.display = 'none'; }, 3000);
  }

  // --- Visuel sélection couleur: synchronise les labels avec l'input checked ---
  function syncColorVisualsForName(name) {
    document.querySelectorAll('input[name="' + name + '"]').forEach(function(inp) {
      const lab = inp.closest('.color-option');
      if (!lab) return;
      if (inp.checked) lab.classList.add('selected'); else lab.classList.remove('selected');
    });
  }

  // initialisation: pour tous les groupes color_*
  const colorInputs = Array.from(document.querySelectorAll('input[type="radio"]')).filter(i => i.name && i.name.startsWith('color_'));
  const processedNames = new Set();
  colorInputs.forEach(function(inp) {
    if (!processedNames.has(inp.name)) {
      syncColorVisualsForName(inp.name);
      processedNames.add(inp.name);
    }
    inp.addEventListener('change', function() {
      syncColorVisualsForName(this.name);
    });
  });

  // helper pour afficher le modal (Bootstrap 5 ou fallback jQuery)
  function showCartModal() {
    const el = document.getElementById('cartModal');
    if (!el) return;
    if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
      new bootstrap.Modal(el).show();
    } else if (window.jQuery && typeof jQuery(el).modal === 'function') {
      jQuery(el).modal('show');
    } else {
      // fallback minimal
      alert('Article ajouté au panier');
    }
  }
  // liaison boutons du modal
  const btnGo = document.getElementById('goToCartBtn');
  if (btnGo) btnGo.addEventListener('click', function(){ window.location.href = "{{ path('app_panier_dota') }}"; });
  const btnContinue = document.getElementById('continueBtn');
  if (btnContinue) btnContinue.addEventListener('click', function(){
    const el = document.getElementById('cartModal');
    if (!el) return;
    if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
      bootstrap.Modal.getInstance(el)?.hide();
    } else if (window.jQuery && typeof jQuery(el).modal === 'function') {
      jQuery(el).modal('hide');
    }
  });

  // quand l'admin change la cible, on met à jour la session côté serveur (ajax)
  const targetSelect = document.getElementById('targetUserSelect');
  if (targetSelect) {
    targetSelect.addEventListener('change', function () {
      fetch("{{ path('set_target_user') }}", {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ target_user_id: this.value || '' })
      }).catch(e => console.error(e));
    });
  }

  document.querySelectorAll('.add-to-cart').forEach(function(button) {
    button.addEventListener('click', function () {
      const productId = this.dataset.id;
      const card = this.closest('.card');
      if (!card) return;

      const sizeSelect = card.querySelector('select[name="size_' + productId + '"]');
      const colorInput = card.querySelector('input[name="color_' + productId + '"]:checked');
      const quantityInput = card.querySelector('input[name="quantity_' + productId + '"]');

      const size = sizeSelect ? sizeSelect.value : '';
      const color = colorInput ? colorInput.value : '';
      const quantity = quantityInput ? quantityInput.value : '1';

      // Validation obligatoire : taille puis couleur
      if (!size) {
        showAjaxAlert('Veuillez sélectionner une taille.');
        if (sizeSelect) sizeSelect.scrollIntoView({ behavior: 'smooth', block: 'center' });
        return;
      }
      if (!color) {
        showAjaxAlert('Veuillez sélectionner une couleur.');
        return;
      }

      // Envoi AJAX (utilise la route add_to_cart qui renvoie JSON si X-Requested-With présent)
      const url = "{{ path('add_to_cart') }}";
      const formData = new FormData();
      formData.append('product_id', productId);
      formData.append('size', size);
      formData.append('color', color);
      formData.append('quantity', quantity);

      // si un admin a sélectionné un utilisateur cible, on l'envoie aussi
      const sel = document.getElementById('targetUserSelect');
      if (sel && sel.value) {
        formData.append('target_user_id', sel.value);
      }

      fetch(url, {
        method: 'POST',
        body: formData,
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      })
      .then(response => response.json().catch(() => ({ success:false, message:'Réponse invalide' })))
      .then(data => {
        if (!data || !data.success) {
          showAjaxAlert(data.message || 'Erreur lors de l\'ajout.');
          return;
        }
        // Met à jour l'UI : badge et points
        const badge = document.getElementById('cartBadge');
        if (badge && typeof data.nombreArticles !== 'undefined') badge.textContent = data.nombreArticles;
        const pointsInCartEl = document.getElementById('pointsInCart');
        const pointsRemainingEl = document.getElementById('pointsRemaining');
        const totalPointsEl = document.getElementById('totalPoints');
        if (pointsInCartEl && typeof data.pointsInCart !== 'undefined') {
          pointsInCartEl.textContent = data.pointsInCart + ' P';
          pointsInCartEl.dataset.value = data.pointsInCart;
        }
        if (totalPointsEl && totalPointsEl.dataset.value) {
          const total = parseInt(totalPointsEl.dataset.value,10) || 0;
          const remaining = Math.max(total - (data.pointsInCart || 0), 0);
          if (pointsRemainingEl) { pointsRemainingEl.textContent = remaining + ' P'; pointsRemainingEl.dataset.value = remaining; }
        }

        // Affiche le modal demandant d'aller au panier ou continuer
        showCartModal();
      })
      .catch(err => {
        console.error(err);
        showAjaxAlert('Erreur réseau lors de l\'ajout.');
      });
    });
  });
});
</script>

{% endblock %}
